@using ERPPlus.BlazorUI.Services
@using ERPPlus.Application.DTOs
@using FluentValidation
@using Blazored.FluentValidation


@page "/customers/create"

@rendermode InteractiveServer
@inject CustomerService _customerService
@inject NavigationManager NavigationManager

<div class="customer-form container shadow-sm p-4 rounded bg-white mt-4">
    <h2 class="form-title mb-4">Cadastro de Cliente</h2>

    <EditForm Model="model" OnValidSubmit="HandleValidSubmit" FormName="customer-create-form">
        <FluentValidationValidator />

        <div class="form-group mb-3">
            <label for="name" class="form-label">Nome</label>
            <InputText id="name" class="form-control custom-input" @bind-Value="model.Name" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>

        <div class="form-group mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control custom-input" @bind-Value="model.Email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>

        <div class="form-group mb-4">
            <label for="password" class="form-label">Senha</label>
            <InputText id="password" class="form-control custom-input" @bind-Value="model.PasswordHash" type="password" />
            <ValidationMessage For="@(() => model.PasswordHash)" />
        </div>

        <button type="submit" class="btn btn-success w-100">Cadastrar Cliente</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-4">@message</div>
    }
</div>
@code {
    private CreateCustomerDTO model = new();
    private string message;

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await _customerService.CreateAsync(model);
            message = $"Cliente cadastrado com sucesso! ID: {result.Id}";
            NavigationManager.NavigateTo("/customers");
        }
        catch (Exception ex)
        {
            message = $"Erro ao cadastrar: {ex.Message}";
        }
    }
}
