@using ERPPlus.Application.DTOs
@using ERPPlus.BlazorUI.Services
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Components.Forms

@page "/orders"
@inject OrderService _orderService
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h3 class="text-success mb-4">Pedidos Realizados</h3>

@if (orders is null)
{
    <p>Carregando pedidos...</p>
}
else if (!orders.Any())
{
    <div class="alert alert-info">Nenhum pedido encontrado.</div>
}
else
{
    <table class="table table-bordered table-hover shadow-sm">
        <thead class="table-success">
            <tr>
                <th>Cliente</th>
                <th>Data</th>
                <th>Produtos</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.CustomerName</td>
                    <td>@order.Date.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <ul class="mb-0">
                            @foreach (var item in order.ProductOrders)
                            {
                                <li>@item.ProductName (@item.Quantity)</li>
                            }
                        </ul>
                    </td>
                    <td>R$ @order.ValueTotal.ToString("N2")</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-secondary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">
            Anterior
        </button>
        <span>Página @_currentPage de @_totalPages</span>
        <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">
            Próxima
        </button>
    </div>
}

@code {
    private List<OrderDTO>? orders;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("page", out var pageValue))
            _currentPage = int.Parse(pageValue!);

        if (query.TryGetValue("pageSize", out var pageSizeValue))
            _pageSize = int.Parse(pageSizeValue!);

        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        var result = await _orderService.GetPagedAsync(_currentPage, _pageSize);
        orders = result.Items;
        _totalPages = (int)Math.Ceiling(result.Total / (double)_pageSize);
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadOrders();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadOrders();
        }
    }
}
